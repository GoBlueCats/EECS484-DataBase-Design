CREATE TABLE USERS
(USER_ID NUMBER,
FIRST_NAME VARCHAR2(100) NOT NULL,
LAST_NAME VARCHAR2(100) NOT NULL,
YEAR_OF_BIRTH INTEGER,
MONTH_OF_BIRTH INTEGER,
DAY_OF_BIRTH INTEGER,
GENDER VARCHAR2(100),
PRIMARY KEY (USER_ID));

CREATE TABLE FRIENDS
(USER1_ID NUMBER,
USER2_ID NUMBER,
PRIMARY KEY(USER1_ID,USER2_ID),
FOREIGN KEY(USER1_ID) REFERENCES USERS,
FOREIGN KEY(USER2_ID) REFERENCES USERS);

CREATE TABLE CITIES
(CITY_ID INTEGER,
CITY_NAME VARCHAR2(100) NOT NULL,
STATE_NAME VARCHAR2(100) NOT NULL,
COUNTRY_NAME VARCHAR2(100) NOT NULL,
UNIQUE(CITY_NAME,STATE_NAME,COUNTRY_NAME),
PRIMARY KEY (CITY_ID));

CREATE TABLE USER_CURRENT_CITY
(USER_ID NUMBER,
CURRENT_CITY_ID INTEGER,
PRIMARY KEY (USER_ID),
FOREIGN KEY (USER_ID) REFERENCES USERS,
FOREIGN KEY (CURRENT_CITY_ID) REFERENCES CITIES);

CREATE TABLE USER_HOMETOWN_CITY
(USER_ID NUMBER,
HOMETOWN_CITY_ID INTEGER,
PRIMARY KEY (USER_ID),
FOREIGN KEY (USER_ID) REFERENCES USERS,
FOREIGN KEY (HOMETOWN_CITY_ID) REFERENCES CITIES);

CREATE TABLE MESSAGE
(MESSAGE_ID INTEGER,
SENDER_ID NUMBER,
RECEIVER_ID NUMBER,
MESSAGE_CONTENT VARCHAR2(2000),
SENT_TIME TIMESTAMP,
PRIMARY KEY (MESSAGE_ID),
FOREIGN KEY (SENDER_ID) REFERENCES USERS,
FOREIGN KEY (RECEIVER_ID) REFERENCES USERS);

CREATE TABLE PROGRAMS
(PROGRAM_ID INTEGER,
INSTITUTION VARCHAR2(100),
CONCENTRATION VARCHAR2(100),
DEGREE VARCHAR2(100),
UNIQUE(INSTITUTION,CONCENTRATION,DEGREE),
PRIMARY KEY (PROGRAM_ID));

CREATE TABLE EDUCATION
(USER_ID NUMBER,
PROGRAM_ID INTEGER,
PROGRAM_YEAR INTEGER,
PRIMARY KEY (USER_ID,PROGRAM_ID),
FOREIGN KEY (USER_ID) REFERENCES USERS,
FOREIGN KEY (PROGRAM_ID) REFERENCES PROGRAMS);

CREATE TABLE USER_EVENTS
(EVENT_ID NUMBER,
EVENT_CREATOR_ID NUMBER NOT NULL,
EVENT_NAME VARCHAR2(100) NOT NULL,
EVENT_TAGLINE VARCHAR2(100),
EVENT_DESCRIPTION VARCHAR2(100),
EVENT_HOST VARCHAR2(100) NOT NULL,
EVENT_TYPE VARCHAR2(100) NOT NULL,
EVENT_SUBTYPE VARCHAR2(100) NOT NULL,
EVENT_LOCATION VARCHAR2(100),
EVENT_CITY_ID INTEGER,
EVENT_START_TIME TIMESTAMP NOT NULL,
EVENT_END_TIME TIMESTAMP NOT NULL,
PRIMARY KEY (EVENT_ID),
FOREIGN KEY (EVENT_CREATOR_ID) REFERENCES USERS,
FOREIGN KEY (EVENT_CITY_ID) REFERENCES CITIES);

CREATE TABLE PARTICIPANTS
(EVENT_ID NUMBER,
USER_ID NUMBER,
CONFIRMATION VARCHAR2(100),
PRIMARY KEY (EVENT_ID, USER_ID),
FOREIGN KEY (EVENT_ID) REFERENCES USER_EVENTS,
FOREIGN KEY (USER_ID) REFERENCES USERS,
CONSTRAINT CHECK_CONFIRMATION CHECK (CONFIRMATION IN ('ATTENDING','DECLINED','UNSURE','NOT_REPLIED')));

CREATE TABLE ALBUMS
(ALBUM_ID VARCHAR2(100),
ALBUM_OWNER_ID NUMBER NOT NULL,
ALBUM_NAME VARCHAR2(100) NOT NULL,
ALBUM_CREATED_TIME TIMESTAMP NOT NULL,
ALBUM_MODIFIED_TIME TIMESTAMP NOT NULL,
ALBUM_LINK VARCHAR2(2000) NOT NULL,
ALBUM_VISIBILITY VARCHAR2(100),
COVER_PHOTO_ID VARCHAR2(100) NOT NULL,
PRIMARY KEY (ALBUM_ID),
FOREIGN KEY (ALBUM_OWNER_ID) REFERENCES USERS,
CONSTRAINT CHECK_VISIBILITY CHECK (ALBUM_VISIBILITY IN ('MYSELF','EVERYONE','FRIENDS_OF_FRIENDS','FRIENDS','CUSTOM')));
/* FOREIGN KEY (COVER_PHOTO_ID) REFERENCES PHOTOS); */

CREATE TABLE PHOTOS
(PHOTO_ID VARCHAR2(100),
ALBUM_ID VARCHAR2(100) NOT NULL,
PHOTO_CAPTION VARCHAR2(2000),
PHOTO_CREATED_TIME TIMESTAMP NOT NULL,
PHOTO_MODIFIED_TIME TIMESTAMP NOT NULL,
PHOTO_LINK VARCHAR2(2000) NOT NULL,
PRIMARY KEY (PHOTO_ID));
/* FOREIGN KEY (ALBUM_ID) REFERENCES ALBUMS);   */

ALTER TABLE ALBUMS ADD CONSTRAINT ALBUMS_PHOTOS FOREIGN KEY (COVER_PHOTO_ID) REFERENCES PHOTOS INITIALLY DEFERRED DEFERRABLE;
ALTER TABLE PHOTOS ADD CONSTRAINT PHOTOS_ALBUMS FOREIGN KEY (ALBUM_ID) REFERENCES ALBUMS INITIALLY DEFERRED DEFERRABLE;

CREATE TABLE TAGS
(TAG_PHOTO_ID VARCHAR2(100),
TAG_SUBJECT_ID NUMBER,
TAG_CREATED_TIME TIMESTAMP NOT NULL,
TAG_X NUMBER NOT NULL,
TAG_Y NUMBER NOT NULL,
PRIMARY KEY (TAG_PHOTO_ID,TAG_SUBJECT_ID),
FOREIGN KEY (TAG_PHOTO_ID) REFERENCES PHOTOS,
FOREIGN KEY (TAG_SUBJECT_ID) REFERENCES USERS);

CREATE SEQUENCE PRO_SEQUENCE
START WITH 1
INCREMENT BY 1;

CREATE TRIGGER PRO_TRIGGER
BEFORE INSERT ON PROGRAMS
FOR EACH ROW
BEGIN
SELECT PRO_SEQUENCE.NEXTVAL INTO :NEW.PROGRAM_ID FROM DUAL;
END;
/


CREATE SEQUENCE CITIES_SEQUENCE
START WITH 1
INCREMENT BY 1;

CREATE TRIGGER CITIES_TRIGGER
BEFORE INSERT ON CITIES
FOR EACH ROW
BEGIN
SELECT CITIES_SEQUENCE.NEXTVAL INTO :NEW.CITY_ID FROM DUAL;
END;
/

CREATE TRIGGER FRIENDS_TRIGGER
BEFORE UPDATE OR INSERT ON FRIENDS
FOR EACH ROW WHEN (NEW.USER1_ID > NEW.USER2_ID)
DECLARE P NUMBER := :NEW.USER1_ID;
BEGIN 
:NEW.USER1_ID := :NEW.USER2_ID;
:NEW.USER2_ID := P;
END;
/



 
